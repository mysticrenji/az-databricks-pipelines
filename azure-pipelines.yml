trigger:
  branches:
    include:
      - main
  paths:
    include:
    - '*'
    exclude:
    - README.md
    
variables:
- group: infra-Variables
- group: project-Variables          

stages:

- stage: 'Terraform_Configuration'
  displayName: 'Terraform Config Validation'
  jobs:
  - job: 'Terraform_Validate'
    workspace:
      clean: all
    steps:
    - script: |
            terraform init \
              -backend-config="storage_account_name=$(TF_STATE_BLOB_ACCOUNT_NAME)" \
              -backend-config="container_name=$(TF_STATE_BLOB_CONTAINER_NAME)" \
              -backend-config="key=$(TF_STATE_BLOB_FILE)" \
              -backend-config="access_key=$(ARM_ACCESS_KEY)"
            terraform fmt
            terraform validate
      displayName: 'Terraform Validate'
      workingDirectory: "$(Build.SourcesDirectory)"

- stage: 'Terraform_Plan'
  displayName: 'Terraform Plan'
  jobs:
  - job: 'Terraform_Plan'
    steps:
    - script: |
              az login --service-principal -u $TF_VAR_client_id -p $TF_VAR_client_secret --tenant $TF_VAR_tenant_id --allow-no-subscriptions            
              terraform init \
              -backend-config="storage_account_name=$(TF_STATE_BLOB_ACCOUNT_NAME)" \
              -backend-config="container_name=$(TF_STATE_BLOB_CONTAINER_NAME)" \
              -backend-config="key=$(TF_STATE_BLOB_FILE)" \
              -backend-config="access_key=$(ARM_ACCESS_KEY)"
              plan=$(System.ArtifactsDirectory)/plan-app.tfplan
              terraform plan -input=false -out $plan
              terraform show -no-color -json $plan  > $(System.ArtifactsDirectory)/plan-app.json
      env:
        TF_VAR_project: $(TF_VAR_project)
        TF_VAR_organizationname: $(TF_VAR_organizationname)
        TF_VAR_rg_name: $(TF_VAR_rg_name)
        TF_VAR_location: $(TF_VAR_location)
        TF_VAR_resource_prefix: $(TF_VAR_resource_prefix)
        TF_VAR_email_notifier: $(TF_VAR_email_notifier)
        TF_VAR_email_id: $(TF_VAR_email_id)
        TF_VAR_client_id: $(TF_VAR_client_id)
        TF_VAR_client_secret: $(TF_VAR_client_secret)
        TF_VAR_tenant_id: $(TF_VAR_tenant_id)
        TF_VAR_databricks_cluster_name: $(TF_VAR_databricks_cluster_name)
        AZDO_ORG_SERVICE_URL: $(TF_VAR_AZDO_ORG_SERVICE_URL)
        AZDO_PERSONAL_ACCESS_TOKEN: $(TF_VAR_AZDO_PERSONAL_ACCESS_TOKEN)
        AZURE_SUBSCRIPTION_ID: $(TF_VAR_AZURE_SUBSCRIPTION_ID)
      displayName: 'Terraform Plan'
      workingDirectory: "$(Build.SourcesDirectory)"

    - script: |
              cat plan-app.json
              echo "##vso[task.setvariable variable=PLAN;isOutput=true]$(cat plan-app.json)"
      name: plan
      displayName: 'Convert Plan'
      workingDirectory: "$(System.ArtifactsDirectory)"

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(System.ArtifactsDirectory)'
        ArtifactName: 'tfplan_artifact'
        publishLocation: 'Container'

- stage: 'Terraform_Plan_Validate'
  displayName: 'Terraform Plan Validation'
  jobs:
  - job : Review_plan
    displayName: Review Plan
    variables: 
      json:   $[ stageDependencies.Terraform_Plan.Terraform_Plan.outputs['plan.PLAN'] ]
    steps:
    - script: |
          echo "Terraform Plan"
          echo "-----------------------------------------------"
          echo "$(json)"
      displayName: Plan

  - job: Mannual_Approval
    displayName: Validate Terraform Plan 
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    -  task: ManualValidation@0
       timeoutInMinutes: 1440 # task times out in 1 day
       inputs:
          notifyUsers: |
                 renjithvr11@gmail.com
          instructions: |
             Please validate the Terraform plan in the previous step and proceed.
          onTimeout: 'resume'

- stage: 'Terraform_Apply'
  displayName: 'Terraform Apply'
  jobs:
  - job: 'Download_Artifacts'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'tfplan_artifact'
        downloadPath: '$(System.ArtifactsDirectory)'
  - job: 'Terraform_Apply'
    dependsOn: 'Download_Artifacts'
    steps:
    - script: |
            ls $(Build.ArtifactStagingDirectory)
            az login --service-principal -u $TF_VAR_client_id -p $TF_VAR_client_secret --tenant $TF_VAR_tenant_id --allow-no-subscriptions            
            terraform init \
              -backend-config="storage_account_name=$(TF_STATE_BLOB_ACCOUNT_NAME)" \
              -backend-config="container_name=$(TF_STATE_BLOB_CONTAINER_NAME)" \
              -backend-config="key=$(TF_STATE_BLOB_FILE)" \
              -backend-config="access_key=$(ARM_ACCESS_KEY)"
            terraform apply $(System.ArtifactsDirectory)/tfplan_artifact/plan-app.tfplan
      env:
        TF_VAR_project: $(TF_VAR_project)
        TF_VAR_organizationname: $(TF_VAR_organizationname)
        TF_VAR_rg_name: $(TF_VAR_rg_name)
        TF_VAR_location: $(TF_VAR_location)
        TF_VAR_resource_prefix: $(TF_VAR_resource_prefix)
        TF_VAR_email_notifier: $(TF_VAR_email_notifier)
        TF_VAR_email_id: $(TF_VAR_email_id)
        TF_VAR_client_id: $(TF_VAR_client_id)
        TF_VAR_client_secret: $(TF_VAR_client_secret)
        TF_VAR_tenant_id: $(TF_VAR_tenant_id)
        TF_VAR_databricks_cluster_name: $(TF_VAR_databricks_cluster_name)
        AZDO_ORG_SERVICE_URL: $(TF_VAR_AZDO_ORG_SERVICE_URL)
        AZDO_PERSONAL_ACCESS_TOKEN: $(TF_VAR_AZDO_PERSONAL_ACCESS_TOKEN)
        AZURE_SUBSCRIPTION_ID: $(TF_VAR_AZURE_SUBSCRIPTION_ID)
      displayName: 'Terraform Apply'
      workingDirectory:  "$(Build.SourcesDirectory)"